{
  "openapi": "3.0.2",
  "info": {
    "title": "Blogo",
    "description": "Blog app with unlimited threading",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "localhost:8080"
    }
  ],
  "tags": [
    {
      "name": "post",
      "description": "Operations about post"
    },
    {
      "name": "comment",
      "description": "Operations about comment"
    },
    {
      "name": "react",
      "description": "React is an operation to give a particular resource a reaction (eg: Like, Angery, etc)"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/api/v1/post": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "get multiple post",
        "operationId": "getPost",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "post"
        ],
        "summary": "Create a new post",
        "operationId": "createPost",
        "requestBody": {
          "description": "Create a new post",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/v1/post/{postId}": {
      "get": {
        "tags": [
          "post"
        ],
        "summary": "Finds Post by ID",
        "operationId": "findPostByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/postId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "404": {
            "description": "post not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/v1/comment": {
      "post": {
        "description": "create a single comment for a specified parent",
        "tags": [
          "comment"
        ],
        "operationId": "addComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "comment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/comment/{commentId}": {
      "get": {
        "description": "get comment by id includes nested comment up to x level",
        "tags": [
          "comment"
        ],
        "operationId": "getCommentByID",
        "parameters": [
          {
            "$ref": "#/components/parameters/commentId"
          }
        ],
        "responses": {
          "200": {
            "description": "comment found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/react/": {
      "get": {
        "description": "Get available react",
        "tags": [
          "react"
        ],
        "operationId": "getReactList",
        "responses": {
          "200": {
            "description": "success get reaction list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReactListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "add reaction to a post / comment",
        "tags": [
          "react"
        ],
        "operationId": "addReact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "reaction created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreatedResponse"
                }
              }
            }
          },
          "default": {
            "description": "error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "PostRequest": {
        "required": [
          "title",
          "content"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "PostResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "author_id": {
            "type": "integer",
            "format": "int64"
          },
          "author_username": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Post title"
          },
          "content": {
            "type": "string"
          },
          "is_reacted": {
            "type": "boolean",
            "description": "describe whether a post is already reacted by user"
          },
          "react_views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReactCount"
            }
          },
          "replies": {
            "type": "array",
            "description": "replies of the post",
            "items": {
              "$ref": "#/components/schemas/CommentResponse"
            }
          }
        }
      },
      "PostsResponse": {
        "type": "array",
        "description": "Response for multiple post",
        "items": {
          "$ref": "#/components/schemas/PostResponse"
        }
      },
      "CommentRequest": {
        "required": [
          "parent_post_id",
          "content"
        ],
        "type": "object",
        "properties": {
          "parent_post_id": {
            "type": "integer"
          },
          "parent_id": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "CommentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "content": {
            "type": "string"
          },
          "author_id": {
            "type": "integer",
            "format": "int64"
          },
          "author_username": {
            "type": "string"
          },
          "is_reacted": {
            "type": "boolean",
            "description": "describe whether a post is already reacted by user, if tru"
          },
          "react_views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReactCount"
            }
          },
          "replies": {
            "description": "replies of this comment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentResponse"
            }
          }
        }
      },
      "ResourceCreatedResponse": {
        "type": "object",
        "required": [
          "message",
          "status"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          }
        }
      },
      "ReactListResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            },
            "thumbnail_img": {
              "description": "url of the react thumbnail",
              "type": "string"
            }
          }
        }
      },
      "ReactRequest": {
        "required": [
          "react_id"
        ],
        "type": "object",
        "properties": {
          "post_id": {
            "type": "integer",
            "format": "int64"
          },
          "comment_id": {
            "type": "integer",
            "format": "int64"
          },
          "react_id": {
            "description": "id of the react type. Get the id from react list endpoint",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReactCount": {
        "description": "describe count of reaction on a given resource (eg: post, comment)",
        "type": "object",
        "properties": {
          "react_id": {
            "type": "integer"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "ErrorResponse": {
        "description": "describe error",
        "type": "object",
        "required": ["message", "status"],
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "boolean"
          }
        }
      }
    },
    "parameters": {
      "postId": {
        "name": "postId",
        "in": "path",
        "description": "ID of a post",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "commentId": {
        "name": "commentId",
        "in": "path",
        "description": "ID of a comment",
        "required": true,
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
